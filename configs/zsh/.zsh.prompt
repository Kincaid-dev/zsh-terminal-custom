#
# CN_Experience - ZSH Prompt (SINOBUZ)
#
# Description:
#     A badass zsh prompt influcened by the almighty bullet-train zsh theme.
#     It doesn't have the functionality that bullet-train has, but it was an
#     excellent learning experience for working with these kinds of scripting
#     languages.
#
#     You may add more modules by seeing how the current ones were created. You
#     may also rearrange how the modules are placed by changing the array order
#     in the "PROMPT CONSTRUCT" function near the end of the file. I wanted to
#     rewrite my old zsh config to make it as flexible as possible, so here you
#     go. :)
#
# Author:
#     Clara Nguyen (@iDestyKK)
#

# -----------------------------------------------------------------------------
# 1. Setup                                                                 {{{1
# -----------------------------------------------------------------------------

# Keep track of previous colours
PREV_FG='0'
PREV_BG='0'
CUR_FG='0'
CUR_BG='0'
PROMPT_ADD=''
PROMPT_FINAL=''

# Shell exclusive characters
SPLIT_CHAR=''
DIR_CHAR=''
RETURN_ZERO='✓'
RETURN_NOT_ZERO='✘'
GIT_PREFIX=''
COMMAND_PREFIX='»'

# Parametres
SPLIT_DIRECTORY=0

#Day of the week (in Japanese)
DOW=(
	'月曜日'
	'火曜日'
	'水曜日'
	'木曜日'
	'金曜日'
	'土曜日'
	'日曜日'
)
ELEM=(
	'月'
	'火'
	'水'
	'木'
	'金'
	'土'
	'日'
)

# -----------------------------------------------------------------------------
# 2. Colours                                                               {{{1
# -----------------------------------------------------------------------------

SINOBUZ=1
if [[ $SINOBUZ -eq 1 ]]; then
	DOW_P=$(date +%u)
	case $DOW_P in
		1)  source "${0:a:h}/../../youbi/zsh/.zsh.prompt.monday" ;;
		2)  source "${0:a:h}/../../youbi/zsh/.zsh.prompt.tuesday" ;;
		3)  source "${0:a:h}/../../youbi/zsh/.zsh.prompt.wednesday" ;;
		4)  source "${0:a:h}/../../youbi/zsh/.zsh.prompt.thursday" ;;
		5)  source "${0:a:h}/../../youbi/zsh/.zsh.prompt.friday" ;;
		6)  source "${0:a:h}/../../youbi/zsh/.zsh.prompt.saturday" ;;
		7)  source "${0:a:h}/../../youbi/zsh/.zsh.prompt.sunday" ;;
		*)  # Something fucked up... but whatever
			source "${0:a:h}/../../youbi/zsh/.zsh.prompt.sunday" ;;
	esac
else
	# Default Colours
	# Time Prompt
	TIME_FG='15'
	TIME_BG='75'

	# Return Prompt
	PASS_FG='16'
	PASS_BG='86'
	FAIL_FG='15'
	FAIL_BG='197'

	# User Prompt
	HOST_FG='15'
	HOST_BG='74'

	# Git Prompt
	GIT_FG='15'
	GIT_BG='241'

	# Path Prompt
	PATH_FG='74'
	PATH_BG='255'
fi

# -----------------------------------------------------------------------------
# 3. Helper Functions                                                      {{{1
# -----------------------------------------------------------------------------

# Functions to make our lives easier
set_colour() {
	# Set the previous colours
	PREV_FG=$CUR_FG
	PREV_BG=$CUR_BG

	# Set the current colours
	CUR_FG=$1
	CUR_BG=$2
}

init_prompt() {
	# Sets temporary prompt var to a blank
	PROMPT_ADD=''
}

append_prompt() {
	# Adds text to the temporary prompt
	PROMPT_ADD=${PROMPT_ADD}$1
}

append_arrow() {
	# Adds an arrow if the module isn't the first. Otherwise it adds a newline.
	if [[ $PROMPT_FINAL != '' ]]; then
		PROMPT_ADD=${PROMPT_ADD}'%F{'$PREV_BG'}%K{'$CUR_BG'}'$SPLIT_CHAR
	else
		PROMPT_ADD=${PROMPT_ADD}$'\n'
	fi
}

append_current_colour() {
	# Forces current colour scheme to be the current FG and BG colours.
	append_prompt '%F{'$CUR_FG'}%K{'$CUR_BG'}'
}

# -----------------------------------------------------------------------------
# 4. Prompt Functions                                                      {{{1
# -----------------------------------------------------------------------------

# Set up scripts to put this stuff in the way we want it.
time_prompt() {
	# Prompt for showing current time.

	# Set the colour details
	set_colour $TIME_FG $TIME_BG
	
	# Construct the Prompt
	init_prompt
	append_arrow
	append_current_colour

	if [[ $SINOBUZ -eq 1 ]]; then
		append_prompt '%B %D{%H:%M:%S} %b'
	else
		append_prompt '%B %D{%H:%M:%S} %b'
	fi
}

#element_prompt() {
#	# Prompt for showing current time.
#
#	# Set the colour details
#	set_colour $HOST_FG $HOST_BG
#	
#	# Construct the Prompt
#	init_prompt
#	append_arrow
#	append_current_colour
#
#	if [[ $SINOBUZ -eq 1 ]]; then
#		append_prompt '%B '${ELEM[$DOW_P]}' %b'
#	else
#		append_prompt '%B '${ELEM[$(date +%u)]}' %b'
#	fi
#}

return_prompt() {
	# Prompt for showing the return value of the previous command.

	# The colours we want to use depend on the results of the last command issued
	# to zsh.

	# Set the colour based on previous result
	if [[ $RET -eq 0 ]]; then
		set_colour $PASS_FG $PASS_BG
	else
		set_colour $FAIL_FG $FAIL_BG
	fi

	# Construct the Prompt
	init_prompt
	append_arrow
	append_current_colour

	append_prompt '%B'
	if [[ $RET -eq 0 ]]; then
		append_prompt ' '$RETURN_ZERO' '
	else
		append_prompt ' '$RETURN_NOT_ZERO' '$RET' '
	fi
	append_prompt '%b'
}

user_prompt() {
	# Prompt for showing USER:HOSTNAME.
	set_colour $HOST_FG $HOST_BG

	# Construct the Prompt
	init_prompt
	append_arrow
	append_current_colour

	append_prompt '%B %n:%m %b'
}

path_prompt() {
	# Prompt for showing the current working directory
	set_colour $PATH_FG $PATH_BG

	# Construct the Prompt
	init_prompt
	append_arrow
	append_current_colour
	
	if [[ $SPLIT_DIRECTORY -ne 0 ]]; then
		CUR_DIR=${${PWD:s/\///}:gs/\//\ ${DIR_CHAR}\ /}
		append_prompt '%B '$CUR_DIR'  %b'
#		append_prompt '%B %1d %b'
	else
		append_prompt '%B %1~ %b'
	fi
}

git_prompt() {
	# Prompt for showing the current branch in a git repo

	# This one is tricky because we need to check if we are even in a git repo
	# before we can actually do anything. And if we are not, simply ignore the
	# entire prompt.
	
	# Tell whether we are inside a git directory or not
	GIT_IN=$(git rev-parse --is-inside-work-tree 2> /dev/null);

	if [[ ! -z $GIT_IN ]]; then
		set_colour $GIT_FG $GIT_BG

		# Construct the Prompt
		init_prompt
		append_arrow
		append_current_colour

		append_prompt ' '$GIT_PREFIX' %B'$(git rev-parse --abbrev-ref HEAD)' %b'
	else
		# Leave the prompt blank
		init_prompt
	fi
}

end_prompt() {
	# Marks the end of the prompt
	init_prompt
	PROMPT_ADD=${PROMPT_ADD}'%F{'$CUR_BG'}%k'$SPLIT_CHAR'%f '$'\n'$COMMAND_PREFIX' '
}

# -----------------------------------------------------------------------------
# 5. Prompt Construct                                                      {{{1
# -----------------------------------------------------------------------------

# Set the prompts
RPROMPT=""
TMOUT=1

precmd() {
	# Get the return value of the last command
	RET=$?

	# Determine the order of the "modules"
	PROMPT_ORDER=(
		'time'
#		'element'
		'return'
		'user'
		'git'
		'path'
		'end'
	)

	# Construct the final prompt
	PROMPT_FINAL=''

	for p in $PROMPT_ORDER; do
		${p}_prompt
		PROMPT_FINAL=${PROMPT_FINAL}$PROMPT_ADD
	done

	# Export to zsh variable
	PROMPT=${PROMPT_FINAL}
}

TRAPALRM() {
	zle reset-prompt
}

export PROMPT
export RPROMPT
